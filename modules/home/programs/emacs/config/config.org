#+TITLE: Emacs Configuration
#+AUTHOR: psyclyx
#+PROPERTY: header-args:emacs-lisp :tangle yes :lexical t
#+STARTUP: overview

* Base
** GC
Don't GC while initializing
#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
        gc-cons-percentage 0.6)
  (defvar config:file-name-handler-alist-cache file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (defun config:restore-post-init-settings ()
    (setq gc-cons-threshold 16777216 ; 16mb
          gc-cons-percentage 0.1)
    (setq file-name-handler-alist config:file-name-handler-alist-cache))
  (add-hook 'emacs-startup-hook #'config:restore-post-init-settings)
#+end_src

Don't gc in the minibuffer either
#+begin_src emacs-lisp
  (defun config:defer-g; ()
    (setq gc-cons-threshold most-positive-fixnum))
  (defun config:-do-restore-gc ()
    (setq gc-cons-threshold 16777216))
  (defun config:restore-gc ()
    (run-at-time 1 nil #'config:-do-restore-gc))

  (add-hook 'minibuffer-setup #'config:defer-gc)
  (add-hook 'minibuffer-exit #'config:restore-gc)
#+end_src

** File Management
#+begin_src emacs-lisp
  (setq create-lockfiles nil
        custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

Keep =~/.config/emacs= clean and organized:

#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    (setq backup-directory-alist
          `(("." . ,(no-littering-expand-var-file-name "backup/"))))

    ;; Keep transient files organized
    (setq transient-history-file (no-littering-expand-var-file-name "transient/history.el")
          transient-levels-file (no-littering-expand-etc-file-name "transient/levels.el")
          transient-values-file (no-littering-expand-etc-file-name "transient/values.el")))
#+end_src

** Config Management
Tools for managing this configuration:

#+begin_src emacs-lisp
  (defun my/reload-config ()
    "Reload the literate config."
    (interactive)
    (org-babel-load-file (expand-file-name "~/.config/emacs/config.org")))
#+end_src

** Exec path
On darwin, I often launch =Emacs.app= instead of =emacs=. However, MacOS
sets a default environment that doesn't include anything configured through
home-manager. =exec-path-from-shell= fixes this by +stealing+ borrowing what's
set in a non-interactive shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :init
    ;; ensure shell is non-interactive
    (setq exec-path-from-shell-arguments nil)
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
 #+end_src
* Interface
** UI Fundamentals
Remove distracting UI elements and provide a clean canvas for editing:

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
#+end_src

** Text Presentation
Relative line numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode 1)
#+end_src

Enable visual line mode globally:

#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

Show whitespace
#+begin_src emacs-lisp
  ;; Show meaningful whitespace
  (setq whitespace-style '(face indentation trailing))
  (global-whitespace-mode '(not shell-mode
  			                  help-mode
  			                  magit-mode
  			                  magit-diff-mode
  			                  ibuffer-mode
  			                  dired-mode
  			                  occur-mode))
#+end_src

Set font
#+begin_src emacs-lisp
  ;; Set default font with comfortable reading size
  (set-face-attribute 'default nil
                      :font "Hack Nerd Font Mono"
                      :height 180)

  ;; Enable Nerd Font icons when in GUI
  (use-package all-the-icons-nerd-fonts
    :after all-the-icons
    :if (display-graphic-p)
    :config
    (all-the-icons-nerd-fonts-prefer))
#+end_src

Matching parens match
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-vibrant t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src

** Welcome Screen
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-center-content t
          dashboard-items '((recents . 5)
                           (projects . 5)
                           (agenda . 5))
          dashboard-set-heading-icons t
          dashboard-set-file-icons t))
#+end_src

* Editor
** Indentation
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 4)
#+end_src
** Modal Editing
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-u-scroll t
          evil-want-C-i-jump t
          evil-undo-system 'undo-tree)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-snipe
    :after evil
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1)
    :custom
    (evil-snipe-scope 'buffer)        ; Search in whole buffer instead of just line
    (evil-snipe-repeat-scope 'buffer) ; Same for repeat
    (evil-snipe-smart-case t)         ; Smart case sensitivity
    )
#+end_src

#+begin_src emacs-lisp
  (use-package evil-easymotion
    :after (evil-snipe)
    :config
    (general-define-key
     :states '(motion)
     :prefix "C-;"
     :prefix-map 'evilem-map)
    (general-define-key
     :keymaps 'evil-snipe-parent-transient-map
     "C-;" (evilem-create 'evil-snipe-repeat
                          :bind ((evil-snipe-scope 'buffer)
                                 (evil-snipe-enable-highlight)
                                 (evil-snipe-enable-incremental-highlight)))))
#+end_src
** Undo System
#+begin_src emacs-lisp
  (use-package undo-tree
    :init
    (global-undo-tree-mode 1)
    :config
    (setq undo-tree-auto-save-history t
          undo-tree-history-directory-alist
          `(("." . ,(no-littering-expand-var-file-name "undo-tree-hist/")))))
#+end_src

** Key Leadership
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    ;; Create our leader key definer
    (general-create-definer my-leader-def
      :keymaps 'override
      :states '(normal visual insert emacs)
      :prefix "SPC"
      :non-normal-prefix "C-SPC"))
#+end_src

** Core Bindings
*** Navigation
Quick movement between files, buffers, and locations:

#+begin_src emacs-lisp
  (my-leader-def
    "." '(find-file :which-key "find file")
    "," '(consult-buffer :which-key "switch buffer")
    "/" '(consult-ripgrep :which-key "search project")
    ";" '(eval-expression :which-key "eval expression")
    ":" '(execute-extended-command :which-key "M-x"))
#+end_src
*** Buffer Management
Operations for working with buffers:

#+begin_src emacs-lisp
  (my-leader-def
    "b" '(:ignore t :which-key "buffer")
    "bb" '(consult-buffer :which-key "switch buffer")
    "bd" '(kill-current-buffer :which-key "kill buffer")
    "bn" '(next-buffer :which-key "next buffer")
    "bp" '(previous-buffer :which-key "previous buffer")
    "br" '(revert-buffer :which-key "revert buffer"))
#+end_src

*** File Operations
Common file management tasks:

#+begin_src emacs-lisp
  (my-leader-def
    "f" '(:ignore t :which-key "file")
    "ff" '(find-file :which-key "find file")
    "fs" '(save-buffer :which-key "save file")
    "fS" '(write-file :which-key "save as")
    "fr" '(consult-recent-file :which-key "recent files")
    "fR" '(my/reload-config :which-key "reload config"))
#+end_src

*** Search
#+begin_src emacs-lisp
  (my-leader-def
    "s" '(:ignore t :which-key "search")

    "ss" '(consult-line :which-key "search in buffer")
    "sS" '(consult-line-multi :which-key "search in buffers")
    "sp" '(consult-ripgrep :which-key "search in project")
    "sf" '(consult-find :which-key "find files")
    "sh" '(consult-org-heading :which-key "search headings")
    "sm" '(consult-mark :which-key "search marks")
    "si" '(consult-imenu :which-key "search symbols")
    "sr" '(consult-recent-file :which-key "search recent")
    "sg" '(consult-git-grep :which-key "search git files")
    "sd" '(consult-dir :which-key "search directories")
    "so" '(consult-outline :which-key "search outline"))
#+end_src

*** Window Management
Commands for manipulating window layout:

#+begin_src emacs-lisp
  (my-leader-def
    "w" '(:ignore t :which-key "window")
    "wh" '(evil-window-left :which-key "window left")
    "wj" '(evil-window-down :which-key "window down")
    "wk" '(evil-window-up :which-key "window up")
    "wl" '(evil-window-right :which-key "window right")
    "ws" '(evil-window-split :which-key "split horizontal")
    "wv" '(evil-window-vsplit :which-key "split vertical")
    "wd" '(evil-window-delete :which-key "delete window")
    "wm" '(delete-other-windows :which-key "maximize window"))
#+end_src

*** Help System
Quick access to Emacs' self-documentation:

#+begin_src emacs-lisp
  (my-leader-def
    "h" '(:ignore t :which-key "help")
    "hf" '(describe-function :which-key "describe function")
    "hv" '(describe-variable :which-key "describe variable")
    "hk" '(describe-key :which-key "describe key")
    "hm" '(describe-mode :which-key "describe mode"))
#+end_src

*** Local Leader
Set up local leader key for major mode-specific commands:

#+begin_src emacs-lisp
  (general-create-definer my-local-leader-def
    :keymaps 'override
    :states '(normal visual insert emacs)
    :prefix "SPC m"
    :non-normal-prefix "C-SPC m")
#+end_src

*** Toggles
#+begin_src emacs-lisp
  (my-leader-def
    "t" '(:ignore t :which-key "toggle")
    "tw" '(visual-line-mode :which-key "word wrap"))
#+end_src

* Completion
** Minibuffer Completion
Vertico provides a vertical completion interface in the minibuffer:

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t)
    (vertico-count 15)
    (vertico-resize t)
    :config
    ;; Hide commands in M-x which don't apply to current mode
    (setq read-extended-command-predicate
          #'command-completion-default-include-p))

  ;; Persist history over Emacs restarts
  (use-package savehist
    :init
    (savehist-mode))

  ;; Directory navigation like ido
  (use-package vertico-directory
    :after vertico
    :ensure nil
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    :hook (rfn-esm-update-handlers . vertico-directory-tidy))
#+end_src

** Completion Styles
Orderless provides flexible, modern completion matching:

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles . (partial-completion basic)))
                                   (project-file (styles . (partial-completion basic)))))
    (orderless-component-separator #'orderless-escapable-split-on-space)
    :config
    ;; Recognize more completion styles
    (setq orderless-matching-styles
          '(orderless-literal
            orderless-prefixes
            orderless-initialism
            orderless-regexp)))
#+end_src

** In-buffer Completion
Corfu provides a sleek pop-up completion interface:

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-delay 0.1)
    (corfu-auto-prefix 1)
    (corfu-preselect 'prompt)
    (corfu-quit-at-boundary 'separator)
    (corfu-quit-no-match t)
    (corfu-separator ?\s)

    :bind
    (:map corfu-map
  	("TAB" . corfu-next)
  	([tab] . corfu-next)
  	("S-TAB" . corfu-previous)
  	([backtab] . corfu-previous))

    :init
    (global-corfu-mode)
    :config
    ;; Enable Corfu completion for minibuffer prompts
    (defun corfu-enable-always-in-minibuffer ()
      "Enable Corfu in the minibuffer if Vertico is not active."
      (unless (bound-and-true-p vertico--input)
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer))

  ;; Make Corfu pop-ups prettier
  (use-package corfu-popupinfo
    :after corfu
    :hook (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay '(0.25 . 0.1))
    (corfu-popupinfo-hide nil))
#+end_src

** Completion At Point Extensions
Cape enhances completion-at-point with more sources and features:

#+begin_src emacs-lisp
  (use-package cape
    :init
    ;; Add useful completion sources
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-keyword)

    ;; Silence the pcomplete capf, no errors or messages!
    (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

    ;; Ensure that pcomplete does not write to the buffer
    ;; and behaves as a pure =completion-at-point-function'
    (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
    :config
    ;; Enable richer annotations in completion items
    (setq completion-annotate-function #'cape-annotate-prompt))
#+end_src

** Rich Annotations
Marginalia adds helpful annotations to minibuffer completions:

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode)
    :custom
    (marginalia-align 'right)
    (marginalia-max-relative-age 0)
    :config
    ;; Add custom annotators for more informative completions
    (add-to-list 'marginalia-prompt-categories '("\\<face\\>" . face))
    (add-to-list 'marginalia-prompt-categories '("\\<var\\>" . variable)))
#+end_src

** Enhanced Command Interface
Consult provides enhanced versions of many built-in commands:

#+begin_src emacs-lisp
  (use-package consult
    :after vertico

    :init
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :config
    ;; Enhance register preview and make it consistent
    (consult-customize
     consult-theme :preview-key '(:debounce 0.1 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key '(:debounce 0.3 any))

    (setq consult-narrow-key "<")

    (setq evil-jumps-cross-buffers nil)
    (evil-set-command-property 'consult-line :jump t))
#+end_src

** Command Discovery
Which-key helps discover available keybindings:

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :custom
    (which-key-idle-delay 0.2)
    (which-key-prefix-prefix "+")
    (which-key-sort-order 'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    (which-key-add-column-padding 1)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 6)
    :config
    ;; Allow C-h to trigger which-key before it is done automatically
    (setq which-key-show-early-on-C-h t)
    ;; Make sure which-key buffer is always below minibuffer
    (setq which-key-popup-type 'minibuffer))
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :init
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    (general-define-key
     :keymaps 'override
     :states '(normal visual insert emacs)
     "C-." '(embark-act :which-key "embark-act")
     "S-C-." '(embark-dwim :which-key "embark-dwin")
     "C-h B" '(embark-bindings :which-key "embark bindings"))

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
  	embark-highlight-indicator
  	embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator)
#+end_src

* Development
** Language Server Protocol
Eglot provides a lightweight, built-in LSP client:

#+begin_src emacs-lisp
  (use-package eglot
    :hook (prog-mode . eglot-ensure)
    :custom
    (eglot-autoshutdown t)           ; Shutdown language servers when closing last file
    (eglot-events-buffer-size 0)     ; Disable events buffer (reduce clutter)
    (eglot-sync-connect nil)         ; Don't block Emacs when connecting
    (eglot-connect-timeout 10)       ; Increase timeout for slower servers
    (eglot-auto-display-help-buffer nil)) ; Don't automatically show help
#+end_src

*** Bindings
#+begin_src emacs-lisp
  (my-leader-def
    ;; Code actions menu
    "c" '(:ignore t :which-key "code")
    "c=" '(eglot-format-buffer :which-key "format buffer")
    "ca" '(eglot-code-actions :which-key "code actions")
    "cr" '(eglot-rename :which-key "rename")

    ;; Navigation (using xref for core operations)
    "cd" '(xref-find-definitions :which-key "goto definition")
    "cD" '(xref-find-references :which-key "find references")
    "cb" '(xref-go-back :which-key "go back")

    ;; LSP-specific operations
    "ci" '(eglot-find-implementation :which-key "goto implementation")
    "ct" '(eglot-find-typeDefinition :which-key "goto type")
    "ch" '(eldoc :which-key "documentation")

    ;; LSP server control
    "l" '(:ignore t :which-key "lsp")
    "ll" '(eglot :which-key "start lsp")
    "lr" '(eglot-reconnect :which-key "reconnect")
    "ls" '(eglot-shutdown :which-key "shutdown"))
#+end_src

** Syntax Checking
Flycheck provides real-time syntax checking:

#+begin_src emacs-lisp
  (use-package flycheck
    :hook (prog-mode . flycheck-mode)
    :custom
    (flycheck-display-errors-delay 0.1)
    (flycheck-indication-mode 'left-margin)
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+end_src

*** Bindings
#+begin_src emacs-lisp
  (my-leader-def
    "e" '(:ignore t :which-key "errors")
    "el" '(flycheck-list-errors :which-key "list errors")
    "en" '(flycheck-next-error :which-key "next error")
    "ep" '(flycheck-previous-error :which-key "previous error")
    "eb" '(flycheck-buffer :which-key "check buffer"))
#+end_src

** Structural Editing
Enhanced structural editing for Lisp dialects:

#+begin_src emacs-lisp
  (use-package lispy
    :hook ((emacs-lisp-mode
            clojure-mode
            lisp-mode
            scheme-mode) . lispy-mode)
    :custom
    (lispy-close-quotes-at-end-p t)
    (lispy-colon-p nil)
    :config
    ;; Customize special chars
    (setq lispy-outline "^;; \\(?:[*]+ \\)"
          lispy-outline-header ";; "
          lispy-safe-delete t
          lispy-safe-copy t
          lispy-safe-paste t
          lispy-safe-actions-no-pull-delimiters-into-comments t))

  (use-package lispyville
    :after (evil lispy)
    :hook (lispy-mode . lispyville-mode)
    :custom
    (lispyville-key-theme
     '(operators
       c-w
       (escape insert)
       (additional-movement normal visual motion)
       prettify
       text-objects
       (atom-movement t)
       commentary
       slurp/barf-cp))
    :config
    ;; Additional keybindings for better Evil integration
    (lispyville-set-key-theme)
    (setq lispy-compat '(magit-blame-mode edebug cider))

    ;; Custom mappings for common operations
    (general-define-key
     :states '(normal visual)
     :keymaps 'lispyville-mode-map
     "[" 'lispyville-previous-opening
     "]" 'lispyville-next-opening
     "(" 'lispyville-backward-up-list
     ")" 'lispyville-up-list
     "M-(" 'lispyville-wrap-round
     "M-[" 'lispyville-wrap-brackets
     "M-{" 'lispyville-wrap-braces)

    ;; Integration with existing leader keys
    (my-local-leader-def
      :keymaps 'lispyville-mode-map
      "l" '(:ignore t :which-key "lispy")
      "ls" '(lispyville-wrap-round :which-key "wrap sexp")
      "lS" '(lispy-splice :which-key "splice sexp")
      "lr" '(lispy-raise :which-key "raise sexp")
      "lc" '(lispy-clone :which-key "clone sexp")
      "lj" '(lispy-join :which-key "join sexps")
      "l>" '(lispy-slurp :which-key "slurp")
      "l<" '(lispy-barf :which-key "barf")
      "lk" '(lispy-kill :which-key "kill sexp")
      "l(" '(lispy-wrap-round :which-key "wrap ()")
      "l[" '(lispy-wrap-brackets :which-key "wrap []")
      "l{" '(lispy-wrap-braces :which-key "wrap {}")
      "l'" '(lispy-quotes :which-key "wrap quotes")
      "l`" '(lispy-backtick :which-key "wrap backtick"))

    ;; Mode line indicator
    (add-to-list 'mode-line-format
                 '(:eval (when (and (boundp 'lispy-mode)
                                   lispy-mode)
                          " Lispy"))
                 t))

  (defun my/lispy-eval-and-comment ()
    "Evaluate the current sexp and insert the result as a comment."
    (interactive)
    (save-excursion
      (let ((result (lispy-eval-and-insert)))
        (newline-and-indent)
        (insert ";; => " result))))
#+end_src
* Formatting
Code formatting across different languages:

#+begin_src emacs-lisp
  (use-package apheleia)

  (my-leader-def
    "=" '(apheleia-format-buffer :which-key "format (apheleia)"))
#+end_src

** Project Management
Enhanced project navigation and management:

#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode +1)
    :custom
    (projectile-completion-system 'default)    ; use our completion setup
    (projectile-enable-caching t)              ; enable caching for better performance
    (projectile-auto-discover nil)             ; don't auto-discover on unknown folders
    (projectile-globally-ignored-directories   ; ignore dirs that typically don't need searching
     '(".git" ".log" "tmp" "dist" "node_modules" ".direnv"))
    :config
    ;; consider these files as project markers
    (add-to-list 'projectile-project-root-files "flake.nix")
    (add-to-list 'projectile-project-root-files "package.json")
    (add-to-list 'projectile-project-root-files "deps.edn"))
#+end_src

*** Bindings
#+begin_src emacs-lisp
  (my-leader-def
    "p"  '(:ignore t :which-key "project")
    "pa" '(projectile-add-known-project :which-key "add known project")
    "pp" '(projectile-switch-project :which-key "switch project")
    "pf" '(projectile-find-file :which-key "find file")
    "pd" '(projectile-find-dir :which-key "find directory")
    "pb" '(projectile-switch-to-buffer :which-key "switch buffer")
    "pk" '(projectile-kill-buffers :which-key "kill buffers")
    "pt" '(projectile-run-vterm :which-key "terminal")
    "pc" '(projectile-compile-project :which-key "compile")
    "p!" '(projectile-run-shell-command-in-root :which-key "run command")
    "p&" '(projectile-run-async-shell-command-in-root :which-key "run async command"))
#+end_src

** Version Control
Magit interface for Git operations:

#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function
     #'magit-display-buffer-fullframe-status-v1)  ; Use full-frame magit status
    (magit-bury-buffer-function
     #'magit-restore-window-configuration)        ; Restore windows after quitting
    (magit-save-repository-buffers 'dontask)      ; Auto-save repo buffers
    (magit-delete-by-moving-to-trash nil)         ; Don't move files to trash
    (magit-no-confirm '(stage-all-changes         ; Reduce confirmation prompts
                        unstage-all-changes))
    :config
    ;; Use Projectile for repository discovery
    (setq magit-repository-directories
          (mapcar (lambda (dir)
                    (cons dir 1))
                  projectile-known-projects)))
#+end_src
*** Bindings
#+begin_src emacs-lisp
  (my-leader-def
    "g"  '(:ignore t :which-key "git")
    "gg" '(magit-status :which-key "status")
    "gb" '(magit-blame :which-key "blame")
    "gc" '(magit-commit :which-key "commit")
    "gC" '(magit-clone :which-key "clone")
    "gf" '(magit-file-dispatch :which-key "file dispatch")
    "gl" '(magit-log-buffer-file :which-key "file log")
    "gL" '(magit-log-current :which-key "branch log")
    "gs" '(magit-stage-file :which-key "stage file")
    "gS" '(magit-stage-modified :which-key "stage all")
    "gu" '(magit-unstage-file :which-key "unstage file")
    "gp" '(magit-push :which-key "push")
    "gP" '(magit-pull :which-key "pull")
    "gx" '(magit-reset-quickly :which-key "reset")
    "g/" '(magit-dispatch :which-key "dispatch"))
#+end_src

* Languages Layer
** Common Features
Common settings and utilities for all programming languages:

#+begin_src emacs-lisp
  (defun my/setup-language-defaults ()
    "Set up common language support features."
    (eglot-ensure)
    (flycheck-mode)
    (electric-pair-local-mode)
    (show-paren-mode))

  ;; Global development bindings
  (my-leader-def
    ;; Code actions
    "c" '(:ignore t :which-key "code")
    "c=" '(eglot-format-buffer :which-key "format buffer")
    "ca" '(eglot-code-actions :which-key "code actions")
    "cr" '(eglot-rename :which-key "rename")
    "ch" '(eldoc :which-key "documentation")

    ;; LSP/Eglot
    "l" '(:ignore t :which-key "lsp")
    "lr" '(eglot-reconnect :which-key "reconnect")
    "ls" '(eglot-shutdown :which-key "shutdown")
    "ll" '(eglot :which-key "start lsp")

    ;; Error checking
    "e" '(:ignore t :which-key "errors")
    "el" '(flycheck-list-errors :which-key "list errors")
    "en" '(flycheck-next-error :which-key "next error")
    "ep" '(flycheck-previous-error :which-key "previous error")
    "eb" '(flycheck-buffer :which-key "check buffer"))

  ;; Navigation bindings for all programming modes
  (my-local-leader-def
    :keymaps 'prog-mode-map
    "g" '(:ignore t :which-key "goto")
    "gd" '(eglot-find-declaration :which-key "declaration")
    "gr" '(eglot-find-references :which-key "references")
    "gi" '(eglot-find-implementation :which-key "implementation")
    "gt" '(eglot-find-typeDefinition :which-key "type definition"))
#+end_src

** Clojure
Core Clojure development environment:

#+begin_src emacs-lisp
  (use-package clojure-mode
    :after (lispyville)
    :mode "\\.clj\\'"
    :hook (clojure-mode . my/setup-language-defaults)
    :config
    (with-eval-after-load 'apheleia
      (setf (alist-get 'clojure-mode apheleia-mode-alist) 'cljstyle)
      (setf (alist-get 'cljstyle apheleia-formatters)
  	  '("cljstyle" "pipe"))))

  (use-package cider
    :after clojure-mode
    :custom
    (cider-repl-display-help-banner nil)
    (cider-show-error-buffer t)
    (cider-auto-select-error-buffer t)
    (cider-repl-history-file (no-littering-expand-var-file-name "cider-history"))
    (cider-repl-wrap-history t)
    (cider-repl-history-size 1000))

  ;; Clojure-specific keybindings
  (my-local-leader-def
    :keymaps 'clojure-mode-map
    ;; REPL
    "'" '(cider-jack-in :which-key "jack in")
    "\"" '(cider-jack-in-clj&cljs :which-key "jack in clj&cljs")

    ;; Evaluation
    "e" '(:ignore t :which-key "eval")
    "eb" '(cider-eval-buffer :which-key "eval buffer")
    "ee" '(cider-eval-last-sexp :which-key "eval last sexp")
    "ef" '(cider-eval-defun-at-point :which-key "eval defun")
    "er" '(cider-eval-region :which-key "eval region")

    ;; Testing
    "t" '(:ignore t :which-key "test")
    "ta" '(cider-test-run-loaded-tests :which-key "run loaded tests")
    "tn" '(cider-test-run-ns-tests :which-key "run ns tests")
    "tt" '(cider-test-run-test :which-key "run test at point"))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'clojure-mode
    (setq lispy-clojure-eval-method 'cider))
#+end_src
** Nix
Support for Nix configuration language:

#+begin_src emacs-lisp
  (use-package nix-ts-mode
    :mode "\\.nix\\'"
    :hook (nix-ts-mode . my/setup-language-defaults)
    :custom
    (nix-nixfmt-bin "alejandra")
    :config
    (with-eval-after-load 'apheleia
      (setf (alist-get 'nix-ts-mode apheleia-mode-alist) 'alejandra)
      (setf (alist-get 'alejandra apheleia-formatters)
  	  '("alejandra" "-"))))
#+end_src

** Emacs Lisp
Enhanced Emacs Lisp editing experience:

#+begin_src emacs-lisp
  (use-package emacs-lisp-mode
    :ensure nil  ; built-in
    :hook ((emacs-lisp-mode . my/setup-language-defaults)
           (emacs-lisp-mode . eldoc-mode))
    :config
    (setq lisp-indent-function #'lisp-indent-function))

  ;; Emacs Lisp specific keybindings
  (my-local-leader-def
    :keymaps 'emacs-lisp-mode-map
    "e" '(:ignore t :which-key "eval")
    "eb" '(eval-buffer :which-key "eval buffer")
    "ee" '(eval-last-sexp :which-key "eval last sexp")
    "ef" '(eval-defun :which-key "eval defun")
    "er" '(eval-region :which-key "eval region"))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load 'emacs-lisp-mode
    (setq lispy-eval-display-style 'overlay))
#+end_src
** TypeScript/JavaScript
Modern TypeScript and JavaScript development:

#+begin_src emacs-lisp
  (use-package typescript-ts-mode
    :mode (("\\.ts\\'" . typescript-ts-mode)
           ("\\.tsx\\'" . tsx-ts-mode))
    :hook ((typescript-ts-mode . my/setup-language-defaults)
           (tsx-ts-mode . my/setup-language-defaults))
    :config
    (add-to-list 'eglot-server-programs
                 '((typescript-ts-mode . ("typescript-language-server" "--stdio"))
                   (tsx-ts-mode . ("typescript-language-server" "--stdio")))))
#+end_src

** Shell Scripts
Improved shell script editing:

#+begin_src emacs-lisp
  (use-package sh-script
    :ensure nil  ; built-in
    :hook (sh-mode . my/setup-language-defaults)
    :custom
    (sh-basic-offset 2)
    (sh-indentation 2))
#+end_src

** Lua
Core Lua development environment:

#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua\\'"
    :interpreter "lua"
    :hook (lua-mode . my/setup-language-defaults)
    :custom
    (lua-indent-level 2)
    (lua-indent-string-contents t)
    (lua-prefix-key nil)  ; Don't override any prefix keys
    :config
    ;; Configure LSP (using lua-language-server)
    (add-to-list 'eglot-server-programs
                 '(lua-mode . ("lua-language-server")))

    ;; Better syntax highlighting
    (setq lua-font-lock-keywords
          (append lua-font-lock-keywords
                  '(("\\<\\(self\\)\\>" . font-lock-keyword-face))))

    (with-eval-after-load 'apheleia
        (setf (alist-get 'lua-mode apheleia-mode-alist) 'stylua)
        (setf (alist-get 'stylua apheleia-formatters)
              '("stylua" "-"))))


  ;; Lua-specific keybindings
  (my-local-leader-def
    :keymaps 'lua-mode-map

    ;; Evaluation
    "e" '(:ignore t :which-key "eval")
    "eb" '(lua-send-buffer :which-key "eval buffer")
    "ef" '(lua-send-defun :which-key "eval function")
    "el" '(lua-send-current-line :which-key "eval line")
    "er" '(lua-send-region :which-key "eval region")

    ;; Documentation
    "h" '(:ignore t :which-key "help")
    "hh" '(eldoc :which-key "documentation at point")
    "hr" '(xref-find-references :which-key "find references")

    ;; Format
    "=" '(apheleia-format-buffer :which-key "format buffer")

    ;; Testing (if using busted or luaunit)
    "t" '(:ignore t :which-key "test")
    "tb" '(lua-send-buffer-and-test :which-key "test buffer")
    "tf" '(lua-send-defun-and-test :which-key "test function")
    "tt" '(lua-run-tests :which-key "run all tests")

    ;; Navigation
    "g" '(:ignore t :which-key "goto")
    "gg" '(xref-find-definitions :which-key "goto definition")
    "gr" '(xref-find-references :which-key "find references")
    "gi" '(eglot-find-implementation :which-key "goto implementation")

    ;; Code actions
    "c" '(:ignore t :which-key "code")
    "cr" '(eglot-rename :which-key "rename")
    "ca" '(eglot-code-actions :which-key "code actions")
    "cf" '(apheleia-format-buffer :which-key "format buffer"))

  ;; Optional: Add support for Neovim configuration if needed
  (add-to-list 'auto-mode-alist '("init\\.lua\\'" . lua-mode))
  (add-to-list 'auto-mode-alist '("\\.nvim/lua/.*\\.lua\\'" . lua-mode))

  ;; Helper functions for Lua development
  (defun lua-send-buffer-and-test ()
    "Send buffer to Lua REPL and run tests."
    (interactive)
    (lua-send-buffer)
    (lua-run-tests))

  (defun lua-send-defun-and-test ()
    "Send current function to Lua REPL and run its tests."
    (interactive)
    (lua-send-defun)
    (lua-run-tests))

  (defun lua-run-tests ()
    "Run Lua tests using the configured test runner."
    (interactive)
    (let ((test-command
           (cond
            ((file-exists-p "busted") "busted")
            ((file-exists-p "luaunit") "lua -lluaunit")
            (t "lua test.lua"))))
      (compile test-command)))
#+end_src
* Applications Layer
** Terminal
VTerm provides a full terminal emulation:

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :custom
    (vterm-max-scrollback 10000)
    (vterm-buffer-name-string "vterm: %s")
    :config
    ;; Disable some evil keys in vterm that conflict with terminal
    (evil-set-initial-state 'vterm-mode 'insert))
#+end_src
*** Bindings
#+begin_src emacs-lisp
  (my-leader-def
    "ot" '(:ignore t :which-key "terminal")
    "ott" '(vterm :which-key "new terminal")
    "otv" '(vterm-other-window :which-key "terminal in split"))
#+end_src

** AI Assistant
GPTel for AI-powered assistance:

#+begin_src emacs-lisp
  (use-package gptel
    :config
    (unless (file-exists-p "~/Sync/org/gptel-conversations")
      (make-directory "~/Sync/org/gptel-conversations" t))

    (setq gptel-default-mode 'org-mode
          gptel-log-conversations t
          gptel-conversation-dir "~/Sync/org/gptel-conversations")

    (when (file-exists-p "~/.openrouter-token")
      (defun read-openrouter-token ()
        "Read OpenRouter API token from ~/.openrouter-token file."
        (with-temp-buffer
          (insert-file-contents (expand-file-name "~/.openrouter-token"))
          (string-trim (buffer-string))))

      (gptel-make-openai "OpenRouter"
        :host "openrouter.ai"
        :endpoint "/api/v1/chat/completions"
        :stream t
        :key 'read-openrouter-token
        :models '((deepseek/deepseek-chat
                   :description "DeepSeek's powerful chat model optimized for dialogue")
                  (openai/o1
                   :description "OpenAI's cutting-edge multimodal model"
                   :capabilities (media))
                  (google/gemini-2.0-flash-thinking-exp:free
                   :description "Google's fast Gemini model with experimental features")
                  (anthropic/claude-3.5-sonnet:beta
                   :description "Anthropic's balanced Claude model for general tasks")
                  (anthropic/claude-3.5-haiku-20241022:beta
                   :description "Anthropic's smaller, faster Claude model")))

      (setq gptel-backend "OpenRouter"
            gptel-model "anthropic/claude-3.5-sonnet:beta"))


    (when (file-exists-p "~/.gptel.el")
      (load-file "~/.gptel.el")
      (when (fboundp 'config:gptel)
        (config:gptel))))
#+end_src
*** Bindings
#+begin_src emacs-lisp
  (my-leader-def
    "a" '(:ignore t :which-key "AI")
    "an" '(gptel :which-key "new chat")
    "am" '(gptel-menu :which-key "model menu"))
#+end_src

** Environment Management
Tools for managing development environments:

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))

  (use-package envrc
    :config
    (envrc-global-mode))
#+end_src

** org-mode
Document authoring and task management.

#+begin_src emacs-lisp
  (use-package org
    :config
    (unless (file-exists-p "~/Sync/org")
      (make-directory "~/Sync/org" t))

    (setq org-directory "~/Sync/org"
          org-agenda-files '("~/Sync/org/agenda.org")
          org-log-done 'time

          ;; Task states
          org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "QUESTION(q)" "|" "DONE(d)" "ANSWERED(a)" "CANCELLED(c)"))

          ;; Refile targets
          org-refile-targets '((org-agenda-files :maxlevel . 3)
                               (org-files-list :maxlevel . 3))

          ;; Capture templates
          org-capture-templates
          '(("t" "Todo" entry (file+headline "~/Sync/org/agenda.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
            ("n" "Note" entry (file "~/Sync/org/notes.org")
             "* %? :note:\n  %U\n  %i\n  %a")
            ("j" "Journal" entry (file+datetree "~/Sync/org/journal.org")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("q" "Question" entry (file+headline "~/Sync/org/questions.org" "Questions")
             "* QUESTION %?\n  %U\n  %i\n  %a"))))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))

  (use-package org-indent
    :after org)
#+end_src

#+RESULTS:

*** Bindings
#+begin_src emacs-lisp
  (my-leader-def
    "n" '(:ignore t :which-key "notes")
    "na" '(org-agenda :which-key "agenda")
    "nc" '(org-capture :which-key "capture")
    "nf" '(org-find-file :which-key "find org file")
    "nl" '(org-store-link :which-key "store link")
    "ni" '(org-insert-link :which-key "insert link")
    "ns" '(org-search-view :which-key "search")
    "nt" '(org-todo-list :which-key "todo list")
    "nj" '(org-journal-new-entry :which-key "journal entry")
    "nb" '(org-switchb :which-key "switch org buffer")
    "nr" '(org-refile :which-key "refile")
    "nT" '(org-toggle-heading :which-key "toggle heading"))
#+end_src

#+begin_src emacs-lisp
  (my-local-leader-def
    :keymaps 'org-mode-map
    ;; Org structure editing - avoiding Meta key
    "[" '(org-promote-subtree :which-key "promote subtree")
    "]" '(org-demote-subtree :which-key "demote subtree")
    "{" '(org-move-subtree-up :which-key "move subtree up")
    "}" '(org-move-subtree-down :which-key "move subtree down")
    "r" '(org-refile :which-key "refile subtree")
    "t" '(org-todo :which-key "cycle todo state")
    "." '(org-time-stamp :which-key "insert timestamp")
    "d" '(org-deadline :which-key "set deadline")
    "s" '(org-schedule :which-key "schedule todo"))
#+end_src
